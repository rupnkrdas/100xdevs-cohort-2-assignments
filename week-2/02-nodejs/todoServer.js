/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require("express");

const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: false }));

let listOfTodos = [];

// 1.GET /todos - Retrieve all todo items
app.get("/todos", (req, res) => {
	// console.log(listOfTodos);
	return res.status(200).json(listOfTodos);
});

// 2.GET /todos/:id - Retrieve a specific todo item by ID
app.get("/todos/:id", (req, res) => {
	const found = listOfTodos.find(
		(todo) => todo.id === parseInt(req.params.id)
	);

	if (found) {
		return res.status(200).json(found);
	} else {
		return res.status(404).json({
			message: `todo with id: ${req.params.id} not found`,
		});
	}
});

// 3. POST /todos - Create a new todo item
app.post("/todos", (req, res) => {
	const newTodo = {
		id: Math.floor(Math.random() * 1000000), // unique random id
		title: req.body.title,
		description: req.body.description,
		completed: false,
	};

	listOfTodos.push(newTodo);
	// console.log(listOfTodos);
	return res.status(201).json(newTodo);
});

// 4. PUT /todos/:id - Update an existing todo item by ID
app.put("/todos/:id", (req, res) => {
	const found = listOfTodos.find(
		(todo) => todo.id === parseInt(req.params.id)
	);

	if (!found) {
		return res.status(404).json({
			message: `Couldn't find TODO with id: ${req.params.id}`,
		});
	}

	const newTitle = req.body.title;
	const newDescription = req.body.description;
	const newCompleted = rew.body.completed;

	if (newTitle) {
		found.title = newTitle;
	}
	if (newDescription) {
		found.description = newDescription;
	}
	if (newCompleted) {
		found.completed = newCompleted;
	}

	return res.status(200).json(found);
});

// 5. DELETE /todos/:id - Delete a todo item by ID
app.delete("/todos/:id", (req, res) => {
	const foundIndex = listOfTodos.findIndex(
		(todo) => todo.id === parseInt(req.params.id)
	);

	if (foundIndex == -1) {
		res.status(404).json({
			message: `Couldn't find TODO with id: ${req.params.id}`,
		});
	} else {
		listOfTodos.splice(foundIndex, 1);
		res.send(200).json({
			message: `Deleted TODO with id: ${req.params.id}`,
		});
	}
});

// catch all other requests, return 404
app.use((req, res) => {
	res.sendStatus(404);
});

app.use((err, req, res, next) => {
	return res.json({
		error: `${err}`,
	});
});

module.exports = app;
